-- --------------------------------------------------------
-- Serveur version:           			10.5.8-MariaDB - mariadb.org binary distribution
-- SE du serveur:                		Win64
-- Generated by HeidiSQL Version:     	11.3.0.6295
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


-- default name is trading, you can change it here
CREATE DATABASE IF NOT EXISTS `trading` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `trading`;

-- store assets like index or currencies pairs
-- used in talend jobs
CREATE TABLE IF NOT EXISTS `asset` (
  `SK_ASSET` int(11) NOT NULL AUTO_INCREMENT,
  `CD_ASSET` varchar(20) DEFAULT NULL,
  `LIB_ASSET` varchar(100) DEFAULT NULL,
  `CD_MT4` varchar(20) DEFAULT NULL,
  `CD_TYPE` varchar(20) DEFAULT NULL,
  `DEFAULT_SPREAD` int(10) unsigned DEFAULT NULL,
  `BROKER` varchar(20) DEFAULT NULL,
  `COMMENT` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`SK_ASSET`) USING BTREE,
  KEY `IX_CD_ASSET` (`CD_ASSET`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

-- store campaigns, a campaign is linked to an EA and can have many scenarii
-- I use to have a campaign = a csv file with all the scenarii 
CREATE TABLE IF NOT EXISTS `campaign` (
  `SK_CAMPAIGN` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SK_ROBOT` int(10) unsigned DEFAULT NULL,
  `CD_CAMPAIGN` varchar(50) DEFAULT NULL,
  `DESCRIPTION` varchar(500) DEFAULT NULL,
  `FILENAME` varchar(100) DEFAULT NULL,
  `DT_START` date DEFAULT NULL,
  `TOP_ACTIVE` tinyint(4) DEFAULT 1,
  PRIMARY KEY (`SK_CAMPAIGN`),
  KEY `IX_CD_CAMPAIGN` (`CD_CAMPAIGN`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

-- procedure to delete all the data of a campaign 
DELIMITER //
CREATE PROCEDURE `delete_campaign`(
	IN `IN_SK_CAMPAIGN` INT
)
    MODIFIES SQL DATA
BEGIN
	
	DELETE FROM test_result WHERE SK_SCENARIO IN (SELECT SK_SCENARIO FROM scenario WHERE sk_campaign=IN_SK_CAMPAIGN);
	DELETE FROM param_value WHERE SK_SCENARIO IN (SELECT SK_SCENARIO FROM scenario WHERE sk_campaign=IN_SK_CAMPAIGN);
	DELETE FROM scenario WHERE sk_campaign=IN_SK_CAMPAIGN;
	DELETE FROM campaign WHERE sk_campaign=IN_SK_CAMPAIGN;

END//
DELIMITER ;

-- store all possible parameters values 
-- used to have a lighter table 'param_value'
CREATE TABLE IF NOT EXISTS `list_values` (
  `SK_LIST_VALUES` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `VALUE` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`SK_LIST_VALUES`) USING BTREE,
  UNIQUE KEY `LIST_VALUES_VALUE` (`VALUE`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


-- store the definitions of parameters of an EA 
-- not the values
CREATE TABLE IF NOT EXISTS `parameter` (
  `SK_PARAM` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SK_ROBOT` int(10) unsigned DEFAULT NULL,
  `NAME` varchar(50) DEFAULT NULL,
  `DESCRIPTION` varchar(500) DEFAULT NULL,
  `DEFAULT_VALUE` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`SK_PARAM`),
  UNIQUE KEY `U_PARAMETER` (`NAME`,`SK_ROBOT`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

-- store the link between a parameter and the value used by a scenario
CREATE TABLE IF NOT EXISTS `param_value` (
  `SK_PARAM_VALUE` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SK_PARAM` int(10) unsigned NOT NULL DEFAULT 0,
  `SK_SCENARIO` int(10) unsigned NOT NULL DEFAULT 0,
  `SK_LIST_VALUES` int(10) unsigned DEFAULT 0,
  PRIMARY KEY (`SK_PARAM_VALUE`),
  UNIQUE KEY `U_PARAM_VALUE` (`SK_SCENARIO`,`SK_PARAM`),
  KEY `PV_SK_SCENARIO` (`SK_SCENARIO`),
  KEY `PV_SK_PARAM` (`SK_PARAM`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

-- store a robot's(=an EA) description
-- an EA have many campaigns and many parameters
CREATE TABLE IF NOT EXISTS `robot` (
  `SK_ROBOT` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CD_ROBOT` varchar(50) DEFAULT NULL,
  `DESCRIPTION` varchar(500) DEFAULT NULL,
  `CD_TYPE_TRADE` varchar(20) DEFAULT NULL,
  `CD_TYPE_ASSET` varchar(20) DEFAULT NULL,
  `STEP` varchar(20) DEFAULT NULL,
  `DT_START_DEV` date DEFAULT NULL,
  `DT_START_BACKTEST` date DEFAULT NULL,
  `DT_START_FWTEST` date DEFAULT NULL,
  `DT_GOLIVE` date DEFAULT NULL,
  `VERSION` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`SK_ROBOT`),
  KEY `IX_CD_ROBOT` (`CD_ROBOT`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

-- store scenarii
-- a scenario belongs to a campaign, have many input values
-- and many results (basically one per asset)
CREATE TABLE IF NOT EXISTS `scenario` (
  `SK_SCENARIO` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SK_CAMPAIGN` int(10) unsigned DEFAULT NULL,
  `NUM_SCENARIO` int(10) unsigned NOT NULL DEFAULT 0,
  `KEY_SCENARIO` int(11) DEFAULT NULL,
  `COMMENT` varchar(500) DEFAULT NULL,
  `HASH_PARAM` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`SK_SCENARIO`),
  UNIQUE KEY `U_SCENARIO` (`NUM_SCENARIO`,`SK_CAMPAIGN`),
  KEY `SCENARIO_KEY_SCENARIO` (`KEY_SCENARIO`),
  KEY `SCENARIO_SK_CAMPAIGN` (`SK_CAMPAIGN`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

-- store the result of a backtest for a scenario on an asset
CREATE TABLE IF NOT EXISTS `test_result` (
  `SK_TEST_RESULT` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SK_SCENARIO` int(10) unsigned DEFAULT NULL,
  `SK_ASSET` int(10) unsigned NOT NULL DEFAULT 0,
  `DT_START_TEST` date DEFAULT NULL,
  `DT_END_TEST` date DEFAULT NULL,
  `OPTIMISATION` bit(1) DEFAULT NULL,
  `CD_UT_TEST` varchar(10) DEFAULT NULL,
  `CD_UT_ENTRY` varchar(10) DEFAULT NULL,
  `SPREAD` int(10) unsigned DEFAULT NULL,
  `BALANCE_BEFORE` float DEFAULT NULL,
  `PROFIT` float DEFAULT NULL,
  `NB_TRADES` int(10) unsigned DEFAULT NULL,
  `MAX_PC_DRAWDOWN` float unsigned DEFAULT NULL,
  `MAX_VAL_DRAWDOWN` float unsigned DEFAULT NULL,
  `PROFIT_FACTOR` float DEFAULT NULL,
  `REM_FACTOR` float DEFAULT NULL,
  `DT_TEST` date DEFAULT NULL,
  PRIMARY KEY (`SK_TEST_RESULT`),
  KEY `IX_SK_ASSET` (`SK_ASSET`),
  KEY `IX_SK_SCENARIO` (`SK_SCENARIO`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */;

/* some examples of assets */
INSERT INTO `asset` (`CD_ASSET`, `LIB_ASSET`, `CD_MT4`, `CD_TYPE`, `DEFAULT_SPREAD`, `BROKER`, `COMMENT`) VALUES
	( 'EURUSD', 'FX PRO EURUSD', 'eurusd', 'CURRENCY', 20, 'FX PRO', 'Phase 1'),
	( 'USDCAD', 'FX PRO USDCAD', 'usdcad', 'CURRENCY', 26, 'FX PRO', 'Phase 1'),
	( 'AUDNZD', 'FX PRO AUDNZD', 'audnzd', 'CURRENCY', 45, 'FX PRO', 'Phase 1'),
	( 'EURGBP', 'FX PRO EURGBP', 'eurgbp', 'CURRENCY', 24, 'FX PRO', 'Phase 1'),
	( 'EURNZD', 'FX PRO EURNZD', 'eurnzd', 'CURRENCY', 50, 'FX PRO', 'Phase 1');

/* the lines for the 2 examples */
INSERT INTO `robot` (`CD_ROBOT`, `DESCRIPTION`, `CD_TYPE_TRADE`, `CD_TYPE_ASSET`, `STEP`, `DT_START_DEV`, `DT_START_BACKTEST`, `DT_START_FWTEST`, `DT_GOLIVE`, `VERSION`) VALUES
	('Swing_3UT_Flex', 'Robot inspired by swing technique from DMT with flex UT and entry conditions', 'SWING', 'FOREX', NULL, NULL, NULL, NULL, NULL, 'V1'),
	('Swing_NNFX_Index', 'Robot inspité de la méthode NNFX porté sur les indices et autres actifs', 'SWING', 'INDEX', NULL, NULL, NULL, NULL, NULL, 'V1');
